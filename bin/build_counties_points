#!/bin/bash

mkdir -p intermediate

# Download county shape file from census data, if we don't have it already
if [ ! -f intermediate/cb_2015_us_county_5m.shp ]; then
  curl -o intermediate/cb_2015_us_county_5m.zip 'https://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_county_5m.zip'
  unzip -od intermediate intermediate/cb_2015_us_county_5m.zip cb_2015_us_county_5m.shp cb_2015_us_county_5m.dbf
  chmod a-x intermediate/cb_2015_us_county_5m.*
fi

# 1. Filter out strange data (copied from https://github.com/topojson/us-atlas)
# 2. Filter out counties that cause timeout
# 3. Only keep certain props
# 4. Get center point and max distance from center to border for each county
# 5. Join with counties that are available on npms, skipping those that aren't
# 6. Write to file
shp2json -n intermediate/cb_2015_us_county_5m.shp \
  | ndjson-filter '!/000$/.test(d.properties.GEOID)' \
  | ndjson-filter '["02016"].indexOf(d.properties.GEOID) < 0' \
  | ndjson-map '(d.properties = {id: d.properties.GEOID, name: d.properties.NAME, stateFip: d.properties.STATEFP}, d)' \
  | ndjson-map -r 'label=./lib/label.js' -r 'maxDistance=./lib/max_distance.js' -r 'fipsToState=./lib/fips_to_state.json' \
    '(center = label(d), distance = maxDistance(center, d), {center, distance, id: d.properties.id, name: d.properties.name, state: fipsToState[d.properties.stateFip]})' \
  | ndjson-join 'd.fips' 'd.id' intermediate/counties-npms.ndjson - \
  | ndjson-map 'd[1]' \
  > intermediate/counties-points.ndjson
